/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package cn.van.kuang.kafka.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Message extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    private static final long serialVersionUID = -2710273402854759374L;
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Message\",\"namespace\":\"cn.van.kuang.kafka.avro\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"content\",\"type\":\"string\"}]}");

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    @Deprecated
    public int id;
    @Deprecated
    public long timestamp;
    @Deprecated
    public java.lang.CharSequence content;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public Message() {
    }

    /**
     * All-args constructor.
     * @param id The new value for id
     * @param timestamp The new value for timestamp
     * @param content The new value for content
     */
    public Message(java.lang.Integer id, java.lang.Long timestamp, java.lang.CharSequence content) {
        this.id = id;
        this.timestamp = timestamp;
        this.content = content;
    }

    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return id;
            case 1:
                return timestamp;
            case 2:
                return content;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                id = (java.lang.Integer) value$;
                break;
            case 1:
                timestamp = (java.lang.Long) value$;
                break;
            case 2:
                content = (java.lang.CharSequence) value$;
                break;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    /**
     * Gets the value of the 'id' field.
     * @return The value of the 'id' field.
     */
    public java.lang.Integer getId() {
        return id;
    }

    /**
     * Sets the value of the 'id' field.
     * @param value the value to set.
     */
    public void setId(java.lang.Integer value) {
        this.id = value;
    }

    /**
     * Gets the value of the 'timestamp' field.
     * @return The value of the 'timestamp' field.
     */
    public java.lang.Long getTimestamp() {
        return timestamp;
    }

    /**
     * Sets the value of the 'timestamp' field.
     * @param value the value to set.
     */
    public void setTimestamp(java.lang.Long value) {
        this.timestamp = value;
    }

    /**
     * Gets the value of the 'content' field.
     * @return The value of the 'content' field.
     */
    public java.lang.CharSequence getContent() {
        return content;
    }

    /**
     * Sets the value of the 'content' field.
     * @param value the value to set.
     */
    public void setContent(java.lang.CharSequence value) {
        this.content = value;
    }

    /**
     * Creates a new Message RecordBuilder.
     * @return A new Message RecordBuilder
     */
    public static cn.van.kuang.kafka.avro.Message.Builder newBuilder() {
        return new cn.van.kuang.kafka.avro.Message.Builder();
    }

    /**
     * Creates a new Message RecordBuilder by copying an existing Builder.
     * @param other The existing builder to copy.
     * @return A new Message RecordBuilder
     */
    public static cn.van.kuang.kafka.avro.Message.Builder newBuilder(cn.van.kuang.kafka.avro.Message.Builder other) {
        return new cn.van.kuang.kafka.avro.Message.Builder(other);
    }

    /**
     * Creates a new Message RecordBuilder by copying an existing Message instance.
     * @param other The existing instance to copy.
     * @return A new Message RecordBuilder
     */
    public static cn.van.kuang.kafka.avro.Message.Builder newBuilder(cn.van.kuang.kafka.avro.Message other) {
        return new cn.van.kuang.kafka.avro.Message.Builder(other);
    }

    /**
     * RecordBuilder for Message instances.
     */
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Message>
            implements org.apache.avro.data.RecordBuilder<Message> {

        private int id;
        private long timestamp;
        private java.lang.CharSequence content;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         * @param other The existing Builder to copy.
         */
        private Builder(cn.van.kuang.kafka.avro.Message.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.id)) {
                this.id = data().deepCopy(fields()[0].schema(), other.id);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.timestamp)) {
                this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.content)) {
                this.content = data().deepCopy(fields()[2].schema(), other.content);
                fieldSetFlags()[2] = true;
            }
        }

        /**
         * Creates a Builder by copying an existing Message instance
         * @param other The existing instance to copy.
         */
        private Builder(cn.van.kuang.kafka.avro.Message other) {
            super(SCHEMA$);
            if (isValidValue(fields()[0], other.id)) {
                this.id = data().deepCopy(fields()[0].schema(), other.id);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.timestamp)) {
                this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.content)) {
                this.content = data().deepCopy(fields()[2].schema(), other.content);
                fieldSetFlags()[2] = true;
            }
        }

        /**
         * Gets the value of the 'id' field.
         * @return The value.
         */
        public java.lang.Integer getId() {
            return id;
        }

        /**
         * Sets the value of the 'id' field.
         * @param value The value of 'id'.
         * @return This builder.
         */
        public cn.van.kuang.kafka.avro.Message.Builder setId(int value) {
            validate(fields()[0], value);
            this.id = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'id' field has been set.
         * @return True if the 'id' field has been set, false otherwise.
         */
        public boolean hasId() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'id' field.
         * @return This builder.
         */
        public cn.van.kuang.kafka.avro.Message.Builder clearId() {
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'timestamp' field.
         * @return The value.
         */
        public java.lang.Long getTimestamp() {
            return timestamp;
        }

        /**
         * Sets the value of the 'timestamp' field.
         * @param value The value of 'timestamp'.
         * @return This builder.
         */
        public cn.van.kuang.kafka.avro.Message.Builder setTimestamp(long value) {
            validate(fields()[1], value);
            this.timestamp = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'timestamp' field has been set.
         * @return True if the 'timestamp' field has been set, false otherwise.
         */
        public boolean hasTimestamp() {
            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'timestamp' field.
         * @return This builder.
         */
        public cn.van.kuang.kafka.avro.Message.Builder clearTimestamp() {
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'content' field.
         * @return The value.
         */
        public java.lang.CharSequence getContent() {
            return content;
        }

        /**
         * Sets the value of the 'content' field.
         * @param value The value of 'content'.
         * @return This builder.
         */
        public cn.van.kuang.kafka.avro.Message.Builder setContent(java.lang.CharSequence value) {
            validate(fields()[2], value);
            this.content = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'content' field has been set.
         * @return True if the 'content' field has been set, false otherwise.
         */
        public boolean hasContent() {
            return fieldSetFlags()[2];
        }


        /**
         * Clears the value of the 'content' field.
         * @return This builder.
         */
        public cn.van.kuang.kafka.avro.Message.Builder clearContent() {
            content = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        @Override
        public Message build() {
            try {
                Message record = new Message();
                record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
                record.timestamp = fieldSetFlags()[1] ? this.timestamp : (java.lang.Long) defaultValue(fields()[1]);
                record.content = fieldSetFlags()[2] ? this.content : (java.lang.CharSequence) defaultValue(fields()[2]);
                return record;
            } catch (Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    private static final org.apache.avro.io.DatumWriter
            WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

    @Override
    public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    private static final org.apache.avro.io.DatumReader
            READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

    @Override
    public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

}
